<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/23/hello-world/"/>
    <url>/2022/04/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>KNN算法</title>
    <link href="/2022/04/22/KNN%E7%AE%97%E6%B3%95/"/>
    <url>/2022/04/22/KNN%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="kNN算法-HOMEWORK"><a href="#kNN算法-HOMEWORK" class="headerlink" title="kNN算法[HOMEWORK]"></a>kNN算法[HOMEWORK]</h1><h2 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h2><ul><li>基本分类与回归方法</li><li>监督学习：样本集中每个数据都存在标签<ul><li>样本集中每一个数据与所属分类的对应关系</li></ul></li><li>新数据的每个特征与样本集中数据<strong>对应的特征进行比较</strong>，算法提取<strong>样本最相似数据(最近邻)的分类标签</strong></li><li>k-近邻算法中k：只选择样本数据集中<strong>前k个最相似的数据</strong></li><li>选择k个最相似数据中<strong>出现次数最多的分类</strong></li></ul><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>一个样本在特征空间中的<strong>k个最相邻的样本中的大多数属于某一个类别</strong>，则该样本也属于这个类别</p><ul><li>只依据<strong>最邻近的一个或者几个</strong>样本的类别来决定待分样本所属的类别</li><li>“近朱者赤，近墨者黑”，由你的邻居来推断出你的类别</li><li>空间内两个点的距离来度量。距离越大，表示两个点越不相似</li></ul><h3 id="类别判定"><a href="#类别判定" class="headerlink" title="类别判定"></a>类别判定</h3><ul><li><p>对<strong>近邻</strong>的投票进行加权，<strong>距离越近则权重越大</strong>（权重为距离平方的倒数）</p></li><li><p>近邻中<strong>哪个类别的点最多</strong>就分为该类</p></li></ul><h2 id="适用于"><a href="#适用于" class="headerlink" title="适用于"></a>适用于</h2><ul><li>类域的<strong>交叉或重叠较多</strong>的待分样本集</li><li>不仅可以用于分类，还可以用于回归<ul><li>该样本的属性：将k个邻居的属性的<strong>平均值</strong>赋给该样本</li><li>更好的方法：将不同距离的邻居对该样本产生的影响<strong>给予不同的权值(weight)</strong><ul><li>e.g.距离越远，权值越小，影响越小</li></ul></li></ul></li><li>==适合于<strong>多分类问题</strong>(multi-modal,对象具有多个类别标签)， kNN比SVM的表现要好==</li></ul><h2 id="kNN计算流程"><a href="#kNN计算流程" class="headerlink" title="kNN计算流程"></a>kNN计算流程</h2><ul><li>计算<strong>已知类别数据集中的点</strong>与<strong>当前点</strong>之间的距离；<ul><li>inX这个要判别分类的点到dataSet中每个点之间的距离</li><li>dataSet为一个矩阵，<strong>每一行</strong>表示已知类别数据集中的<strong>一个点</strong>（一个向量）</li></ul></li><li>按照距离递增次序排序；<ul><li>distances.argsort() 从小到大排序</li></ul></li><li>选取与当前点距离最小的k个点；</li><li>确定前k个点所在类别的出现频率；</li><li>返回前k个点所出现频率最高的类别作为当前点的预测分类。</li></ul><p>==shape[0]:行数==</p><p>==shape[1]:列数==</p><p>np.tile(inX,(m, 1)) 行上复制m次，列上复制1次（即列不复制）</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs python">b = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<br>np.tile(b, (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br>array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>       [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>       [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>       [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<br></code></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="numpy-argsort"><a href="#numpy-argsort" class="headerlink" title="numpy.argsort"></a>numpy.argsort</h3><p>numpy.argsort(a, axis=- 1, kind=None, order=None)</p><p>axis：默认-1（最后axis）</p><p>axis=0表示列相加，axis=1表示行相加</p><p>kind：<strong>‘quicksort’, ‘mergesort’, ‘heapsort’, ‘stable’</strong></p><p>order：<strong>str or list of str</strong></p><h2 id="python开方"><a href="#python开方" class="headerlink" title="python开方"></a>python开方</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">import <span class="hljs-keyword">math</span><br><span class="hljs-keyword">math</span>.sqrt(<span class="hljs-number">144</span>) <span class="hljs-comment"># 12</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pow</span>(<span class="hljs-number">144</span>, <span class="hljs-number">0</span>.<span class="hljs-number">5</span>) # <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">144</span>**<span class="hljs-number">0</span>.<span class="hljs-number">5</span> # <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h2 id="Python-字典-Dictionary-get"><a href="#Python-字典-Dictionary-get" class="headerlink" title="Python 字典(Dictionary) get()"></a>Python 字典(Dictionary) get()</h2><p> <strong>get()</strong> 函数返回指定键的值。</p><p>classCount.get(voteIlabel,0)：</p><ul><li>指定了label键，默认值为0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 没有设置 Sex，也没有设置默认的值，输出 None</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Sex : %s&quot;</span> %  tinydict.get(<span class="hljs-string">&#x27;Sex&#x27;</span>))  <br><br><span class="hljs-comment"># 没有设置 Salary，输出默认的值  0.0</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;Salary: %s&#x27;</span> % tinydict.get(<span class="hljs-string">&#x27;Salary&#x27;</span>, <span class="hljs-number">0.0</span>))<br></code></pre></td></tr></table></figure><h2 id="Python-sorted"><a href="#Python-sorted" class="headerlink" title="Python sorted()"></a>Python sorted()</h2><p><strong>sorted()</strong> 函数对所有可迭代的对象进行<strong>排序操作</strong></p><p><em>sort 是应用在 <strong>list</strong> 上的方法，sorted 可以对<strong>所有可迭代的对象</strong>进行排序操作</em></p><p><em>sort 方法返回的是对已经存在的列表进行操作，无返回值</em></p><p><em>sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作</em></p><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><p>程序在我的假设条件下，能够正常良好的运作，其实就相当于一个 if 语句</p><p>测试一下，一些最坏情况是否发生，所以这里有了 assert()。</p><p>其作用是如果它的条件返回错误，则终止程序执行</p><h2 id="Math-floor"><a href="#Math-floor" class="headerlink" title="Math.floor()"></a>Math.floor()</h2><p>返回小于或等于一个<strong>给定数字的最大整数</strong></p><p><strong>向下取整</strong></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor#syntax">语法</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Math.floor(x)<br></code></pre></td></tr></table></figure><p>dataset.data:</p><h3 id="sklearn-数据库"><a href="#sklearn-数据库" class="headerlink" title="sklearn 数据库"></a>sklearn 数据库</h3><p>import sklearn.datasets as datasets</p><p>主要有两种：<br>- 封装好的经典数据。<strong>eg</strong>: boston 房价, 糖尿病, 数字, Iris 花。在代码中以“load”开头。</p><p>- 自己设计参数，然后生成的数据，例如用来训练线性回归模型的数据（强大）。在代码中以“make”开头</p><p><img src="https://morvanzhou.github.io/static/results/sklearn/2_3_1.png" alt="image"></p><h2 id="sklearn-model-selection-train-test-split"><a href="#sklearn-model-selection-train-test-split" class="headerlink" title="sklearn.model_selection.train_test_split"></a><a href="https://scikit-learn.org/stable/modules/classes.html#module-sklearn.model_selection"><code>sklearn.model_selection</code></a>.train_test_split</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sklearn.model_selection.train_test_split(<span class="hljs-number">*a</span>rrays, <span class="hljs-attribute">test_size</span>=None, <span class="hljs-attribute">train_size</span>=None, <span class="hljs-attribute">random_state</span>=None, <span class="hljs-attribute">shuffle</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">stratify</span>=None)[source]<br></code></pre></td></tr></table></figure><p>将数组/矩阵随机打乱分成训练、测试样本</p><p><strong>test_size</strong>：</p><ul><li>测试集所占的比例，0-1之间或代表测试集的整数</li></ul><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308150715986.png" alt="image-20220308150715986"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308150728273.png" alt="image-20220308150728273"></p><ul><li>原本样本数：150，0.5取样后75</li><li>idx=75</li><li>X有75行，y有75列</li><li>ystat中有3类，每类有不同样本数【每次随机】</li><li>75*0.2=15个测试样本</li></ul><p>采样率换成0.1：</p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308151045761.png" alt="image-20220308151045761"></p><ul><li>150*0.1=15</li><li>15个样本中有3类</li></ul><h2 id="random-sample"><a href="#random-sample" class="headerlink" title="random.sample"></a>random.sample</h2><p>对于random.sample的用法，多用于<strong>截取列表的指定长度的随机数</strong>，但是不会改变列表本身的排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>rs = random.sample(<span class="hljs-built_in">list</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">#输出[2,4]，随机找了2个list中的数</span><br></code></pre></td></tr></table></figure><ul><li>此数组随着不同的执行，里面的元素随机，但都是两个</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">rs = random.sample(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>), <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(rs)<br><br><br>》》》[<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><ul><li>使用range（），自动生成一个list:[0,1.2….9]</li></ul><h2 id="collections-—-Container-datatypes"><a href="#collections-—-Container-datatypes" class="headerlink" title="collections — Container datatypes"></a><a href="https://docs.python.org/3/library/collections.html#module-collections"><code>collections</code></a> — Container datatypes</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tally occurrences of words in a list</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>cnt = Counter()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]:<br><span class="hljs-meta">... </span>    cnt[word] += <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>cnt<br>Counter(&#123;<span class="hljs-string">&#x27;blue&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;red&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;green&#x27;</span>: <span class="hljs-number">1</span>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Find the ten most common words in Hamlet</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<br><span class="hljs-meta">&gt;&gt;&gt; </span>words = re.findall(<span class="hljs-string">r&#x27;\w+&#x27;</span>, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hamlet.txt&#x27;</span>).read().lower())<br><span class="hljs-meta">&gt;&gt;&gt; </span>Counter(words).most_common(<span class="hljs-number">10</span>)<br>[(<span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-number">1143</span>), (<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-number">966</span>), (<span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-number">762</span>), (<span class="hljs-string">&#x27;of&#x27;</span>, <span class="hljs-number">669</span>), (<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-number">631</span>),<br> (<span class="hljs-string">&#x27;you&#x27;</span>, <span class="hljs-number">554</span>),  (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">546</span>), (<span class="hljs-string">&#x27;my&#x27;</span>, <span class="hljs-number">514</span>), (<span class="hljs-string">&#x27;hamlet&#x27;</span>, <span class="hljs-number">471</span>), (<span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-number">451</span>)]<br></code></pre></td></tr></table></figure><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="dataset-datasets-load-iris"><a href="#dataset-datasets-load-iris" class="headerlink" title="dataset = datasets.load_iris()"></a>dataset = datasets.load_iris()</h2><p>sample_rate = 0.5 # 采样率（可以选择小于1）</p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308152953872.png" alt="image-20220308152953872"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308154044641.png" alt="image-20220308154044641"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308154101537.png" alt="image-20220308154101537"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308154143187.png" alt="image-20220308154143187"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308154155165.png" alt="image-20220308154155165"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308154208057.png" alt="image-20220308154208057"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308154218279.png" alt="image-20220308154218279"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308153131717.png" alt="image-20220308153131717"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308164311481.png" alt="image-20220308164311481"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308164609119.png" alt="image-20220308164609119"></p><p><img src="KNN%E7%AE%97%E6%B3%95.assets/image-20220308164628930.png" alt="image-20220308164628930"></p>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>课程作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
